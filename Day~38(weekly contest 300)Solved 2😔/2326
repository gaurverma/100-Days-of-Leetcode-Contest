/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> spiralMatrix(int m, int n, ListNode* head) {
        vector<vector<int>> a(m,vector<int>(n,-1));
        int i, k = 0, l = 0;
  
    while (k < m && l < n && head) {
        for (i = l; i < n; ++i){
             a[k][i] = (head)?head->val:-1;
            if(head) head = head->next;
        }
            
        k++;
        for (i = k; i < m; ++i) {
            a[i][n - 1] = (head)?head->val:-1 ;
            if(head) head = head->next;
        }
        n--;
  
        if (k < m) {
            for (i = n - 1; i >= l; --i) {
                a[m - 1][i] = (head)?head->val:-1 ;
                if(head) head = head->next;
            }
            m--;
        }

        if (l < n) {
            for (i = m - 1; i >= k; --i) {
                a[i][l] = (head)?head->val:-1;
                if(head) head = head->next;
            }
            l++;
        }
    }
        
        return a;
    }
};