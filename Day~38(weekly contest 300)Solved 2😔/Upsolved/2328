class Solution {
public:
    
vector<vector<long long >> dp;
    int ret,mod = 1e9+7;
    
    public:
    int countPaths(vector<vector<int>>& matrix) {
        int rows = matrix.size();
        int cols = matrix[0].size();
        dp  = vector<vector<long long>>(rows, vector<long long>(cols, 0));
        
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                if(dp[i][j]==0){
                    ret = (ret +  dfs(i, j,matrix,rows,cols))%mod;
                }
            }
        }
          
        
        return ret;
    }
    
        long long dfs(int x, int y,vector<vector<int>>& matrix,int &rows,int& cols) {
            if (dp[x][y]) return dp[x][y];
            vector<vector<int>> dirs = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
            for (auto &dir : dirs) {
                int xx = x + dir[0], yy = y + dir[1];
                if (xx < 0 || xx >= rows || yy < 0 || yy >= cols) continue;
                if (matrix[xx][yy] <= matrix[x][y]) continue;
                dp[x][y] = (dp[x][y] + dfs(xx,yy,matrix,rows,cols))%mod;
            }
            dp[x][y]=(dp[x][y]+1)%mod;
            return dp[x][y];
        };

};