class Solution {
public:
    int minOperations(vector<vector<int>>& grid, int x) {
        unordered_map<int,int> mp;
        for(auto v:grid){
            for(auto i:v){
                mp[i]++;
            }
        }
        vector<pair<int,int>> pairs;
        for(auto i:mp){
           pairs.push_back(i);
        }
        sort(pairs.begin(),pairs.end());
        int n = pairs.size();
        vector <int> rdif(n,0),ldif(n,0);
        int fq = pairs[0].second;
        for(int i=1;i<n;i++){
            if((pairs[i].first-pairs[i-1].first)%x!=0)
                return -1;
            ldif[i] = ldif[i-1]+fq*((pairs[i].first-pairs[i-1].first)/x);
            fq += pairs[i].second;
        }
        fq = pairs[n-1].second;
        for(int i=n-2;i>=0;i--){
            rdif[i] = rdif[i+1]+fq*((pairs[i+1].first-pairs[i].first)/x);
            fq += pairs[i].second;
        }
        int ans = INT_MAX;
        for(int i=0;i<n;i++)
            ans  = min(ans,ldif[i]+rdif[i]);
        return ans;
    }
};